app.py:
# -*- coding: utf-8 -*-
# @Time    : 2024/11/16 09:07
# @Author  : AI悦创
# @FileName: app.py
# @Software: PyCharm
# @Blog    ：https://bornforthis.cn/
# code is far away from bugs with the god animal protecting
#    I love animals. They taste delicious.
from flask import Flask, render_template
import markdown
import os, re, random

app = Flask(__name__)


def parse_sort_key(filename):
    """
    如果文件名以数字开头，则按数字排序，否则返回一个随机数以保证随机排序。
    示例：
        01-hello.md -> sort_key = 1
        10-world.md -> sort_key = 10
        readme.md   -> sort_key = 随机
    """
    match = re.match(r'^(\d+)', filename)
    if match:
        return int(match.group(1))
    else:
        # 如果你想每次都相同随机顺序，可自行改为其他逻辑
        return random.randint(100000, 999999)


def get_title_from_filename(filename):
    """
    去掉文件的扩展名和开头的数字序号后，作为文章展示标题。
    比如 '01-hello.md' -> 'hello'; 'readme.md' -> 'readme'
    你也可以在这里做更精细的标题提取，比如读取 markdown 第一行的 # 标题等。
    """
    # 去掉 .md
    name = filename.rsplit('.md', 1)[0]
    # 去掉开头的数字和中划线等
    name = re.sub(r'^(\d+)(-|\s)*', '', name)
    return name


def build_directory_tree(root_dir):
    """
    递归地构建目录树数据结构：
    返回示例:
    {
      'dirname': 'articles',
      'subdirs': {
          'Python': {
              'dirname': 'Python',
              'subdirs': {...},
              'files': [{'filename': '01-intro.md','title': 'intro'}, ...]
          },
          ...
      },
      'files': [{'filename': 'readme.md','title': 'readme'}, ...]
    }
    """
    tree = {
        'dirname': os.path.basename(root_dir),
        'subdirs': {},
        'files': []
    }

    # 获取当前目录下的所有条目
    entries = os.listdir(root_dir)
    # 先把目录和文件分开
    dirs = [d for d in entries if os.path.isdir(os.path.join(root_dir, d))]
    files = [f for f in entries if os.path.isfile(os.path.join(root_dir, f)) and f.endswith('.md')]

    # 排序文件
    files_sorted = sorted(files, key=parse_sort_key)
    for f in files_sorted:
        tree['files'].append({
            'filename': f,
            'title': get_title_from_filename(f)
        })

    # 递归处理子目录
    for d in dirs:
        subdir_path = os.path.join(root_dir, d)
        # 这里直接递归构建子目录结构
        tree['subdirs'][d] = build_directory_tree(subdir_path)

    return tree


@app.route('/')
def index():
    """
    新版主页：遍历 'articles' 目录，将其按目录分组后，在首页以类别的形式展示
    """
    # 构建整个 articles 文件夹的目录树
    directory_tree = build_directory_tree('articles')
    # 传给模板做展示
    return render_template('index.html', directory_tree=directory_tree)


@app.route('/article/<path:filename>')
def article(filename):
    """
    文章阅读页面。
    1. 根据 filename 打开指定 .md 文件，渲染为 HTML。
    2. 同时也把目录树传给 article.html，用以在左侧显示 VuePress 风格 sidebar。
    3. 将 current_file=filename 传递给模板，用于高亮当前文章并展开所在目录。
    """
    full_path = os.path.join('articles', filename)
    if not os.path.isfile(full_path):
        return f"File not found: {filename}", 404

    with open(full_path, 'r', encoding='utf-8') as f:
        content = f.read()
        md = markdown.Markdown(extensions=[
            'extra',  # 包含tables、fenced_code、footnotes、def_list等一揽子常用扩展
            'admonition',  # 支持 !!! note / warning 等提示块
            'attr_list',  # 允许添加HTML属性，如 {#id .class} 写在 markdown 段落或标题后
            'codehilite',  # 代码高亮
            'def_list',  # 定义列表 (extra也有，留这里兼容一些场景)
            'fenced_code',  # 代码块 (extra也有，留这里兼容一些场景)
            'footnotes',  # 脚注
            'tables',  # 表格 (extra也有，留这里兼容一些场景)
            'abbr',  # 缩略词
            'meta',  # 允许在文档开头书写元信息
            'nl2br',  # 自动将单独的换行符转为 <br>
            'sane_lists',  # 更智能地处理列表
            'smarty',  # 智能引号、破折号等排版优化
            'toc',  # 生成目录
        ])
        html_content = md.convert(content)
        toc = md.toc
        # 获取元信息（meta），每个字段都是列表，如 meta['title'] = ['xxx']
        meta = md.Meta if hasattr(md, 'Meta') else {}

    # 构建整个 articles 文件夹的目录树（用于左侧侧边栏）
    directory_tree = build_directory_tree('articles')

    return render_template('article.html',
                           content=html_content,
                           toc=toc,
                           directory_tree=directory_tree,
                           current_file=filename,
                           meta=meta)  # 传给模板
    # 注意：元信息在前端可通过 meta 来获取，比如 meta.title, meta.author 等。


if __name__ == '__main__':
    app.run(debug=True)

article.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Article</title>
    <link href="https://fonts.googleapis.com/css2?family=Merriweather:wght@400;700&family=Open+Sans:wght@400;700&display=swap"
          rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/pyodide/v0.21.0/full/pyodide.js"></script>
    <link rel="icon" href="https://bornforthis.cn/favicon.ico">
    <!-- CodeMirror CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.css">
    <link rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/theme/material-darker.min.css">
    <!-- CodeMirror JavaScript -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/python/python.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/javascript/javascript.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/clike/clike.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/xml/xml.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/ruby/ruby.min.js"></script>
    <!-- Font Awesome（可选，用于添加图标） -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        body {
            font-family: 'Open Sans', sans-serif;
            line-height: 1.6; /* 行距微增，使文字更舒适 */
            font-size: 18px;
            background-color: #f7f7f7; /* 改为更柔和的浅灰背景 */
            color: #333;
            margin: 0;
            padding: 0;
        }

        h1, h2, h3, h4, h5, h6 {
            font-family: 'Merriweather', serif;
            color: #444;
            margin-top: 1.2em; /* 增大标题与上方内容的间距 */
            margin-bottom: 0.6em; /* 增大标题与下方内容的间距 */
        }

        p {
            margin: 0.9em 0; /* 适当段落间距 */
        }

        a {
            color: #007bff;
            text-decoration: none;
        }

        a:hover {
            text-decoration: underline;
        }

        /* 外层容器，用来居中并控制三列布局 */
        .page-container {
            display: flex;
            justify-content: flex-start;
            align-items: flex-start;
            max-width: 1200px; /* 根据需要可自定义 */
            margin: 0 auto; /* 居中 */
        }

        /* 左侧侧边栏：增加 flex-shrink:0，避免它被挤压 */
        .sidebar {
            width: 260px;
            flex-shrink: 0; /* 关键：不允许被挤压 */
            background-color: #fafafa; /* 更浅的背景 */
            padding: 10px !important;
            border-right: 1px solid #ddd;
            position: sticky;
            top: 0;
            height: 100vh;
            overflow-y: auto;
        }

        .sidebar h3 {
            font-size: 1.2rem;
            margin-top: 0;
        }

        .folder-name {
            font-weight: bold;
            cursor: pointer;
            margin: 6px 0;
        }

        .nested {
            margin-left: 15px;
            display: none; /* 初始折叠 */
        }

        .nested.show {
            display: block; /* 展开 */
        }

        .sidebar ul {
            list-style-type: none;
            padding-left: 0;
            margin: 0; /* 移除默认 margin */
        }

        .sidebar li {
            margin: 4px 0;
        }

        .sidebar a {
            color: #007bff;
            text-decoration: none;
        }

        .sidebar a:hover {
            text-decoration: underline;
        }

        /* 高亮当前文件 */
        .active-file {
            font-weight: bold;
            color: #0056b3; /* 使当前文件颜色更深一点 */
            text-decoration: underline;
        }

        .content {
            flex: 1;
            padding: 0;
            margin: 0;
            gap: 0;
            display: flex;
            justify-content: flex-start;
            align-items: flex-start;
        }

        .main-article {
            width: 800px !important;
            max-width: 800px !important;
            min-width: 800px !important;
            margin-right: 0 !important;
            background: #ffffff; /* 文章背景为白色，与整体灰背景区分 */
            padding: 24px; /* 内边距增加，减轻阅读压迫感 */
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            flex: 0 0 auto !important;
        }

        /* 修改后的元信息区域样式 */
        .meta-info {
            display: flex;
            flex-wrap: wrap; /* 允许换行 */
            align-items: center; /* 垂直居中对齐 */
            margin-bottom: 20px;
            padding: 16px;
            border-radius: 8px;
            background-color: #f0f8ff; /* 淡蓝色背景 */
            border: 1px solid #dbeafe; /* 淡蓝边框 */
        }
        .meta-info h1 {
            flex-basis: 100%; /* 标题占据一整行 */
            margin-top: 0;
            margin-bottom: 0.3em;
            font-size: 1.8rem;
            font-family: 'Merriweather', serif;
        }
        .meta-item {
            display: flex;
            align-items: center;
            margin-right: 20px; /* 每个元数据项之间的间距 */
            margin-bottom: 8px; /* 小屏幕下换行时的间距 */
            font-size: 0.95rem;
            color: #555;
        }
        .meta-item:last-child {
            margin-right: 0; /* 移除最后一个元数据项的右边距 */
        }
        .meta-label {
            display: inline-flex;
            align-items: center;
            font-weight: bold;
            margin-right: 0.4em;
            color: #333;
        }

        .meta-label i {
            margin-right: 4px; /* 图标与文本的间距 */
        }

        .meta-value {
            display: inline-block;
            color: #444;
        }
        .meta-tags span,
        .meta-categories span {
            display: inline-block;
            background: #e0f2fe;
            color: #0369a1;
            border-radius: 4px;
            padding: 2px 6px;
            margin-right: 4px;
            font-size: 0.85rem;
        }

        button.run-button, button.reset-button {
            background-color: #61afef;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 8px 16px;
            cursor: pointer;
        }
        button.run-button:hover, button.reset-button:hover {
            background-color: #5292e2;
        }

        .CodeMirror-scroll {
            overflow: auto;
        }

        /* 自定义选中行颜色 */
        .CodeMirror-selected {
            background: #3399ff !important; /* 更改为你想要的颜色 */
        }

        .main-article img {
            max-width: 100%;
            height: auto;
            display: block; /* 防止行内元素空隙问题 */
            margin: 10px auto; /* 图片居中 */
        }

        /* === TOC（目录） === */
        .toc-container {
            width: 250px;
            background: #fafafa;
            border: 1px solid #ddd;
            font-size: 14px;
            line-height: 1.5;
            padding: 20px;
            position: sticky;
            top: 20px;
            max-height: 80vh; /* 最大高度，超出时可滚动 */
            overflow-y: auto;
            scroll-behavior: smooth; /* 平滑滚动 */
            flex-shrink: 0;
            text-align: left;
            border-radius: 8px; /* 圆角 */
            margin-top: 0; /* 与主内容同顶 */
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
            margin-left: 0 !important;
        }

        .toc-container h2 {
            font-family: 'Merriweather', serif;
            color: #333;
            font-size: 16px;
            margin-top: 0;
            margin-bottom: 10px;
            border-bottom: 1px solid #ddd;
            padding-bottom: 5px;
        }

        .toc {
            list-style-type: none;
            padding-left: 0;
            counter-reset: h1counter;
        }
        .toc ul {
            list-style-type: none;
            margin-left: 0; /* 移除默认的margin-left */
            padding-left: 10px; /* 左侧填充 */
        }
        .toc li {
            margin-bottom: 5px;
        }
        .toc a {
            text-decoration: none;
            color: #333;
            display: inline-block;
            position: relative;
            padding: 2px 0;
            word-wrap: break-word;
        }
        .toc a:hover {
            text-decoration: underline;
            color: #000;
        }
        .toc .toc-h1 { counter-reset: h2counter; padding-left: 0px; margin-bottom: 8px; }
        .toc .toc-h2 { counter-reset: h3counter; padding-left: 20px; margin-bottom: 6px; }
        .toc .toc-h3 { counter-reset: h4counter; padding-left: 40px; margin-bottom: 4px; }
        .toc .toc-h4 { counter-reset: h5counter; padding-left: 60px; margin-bottom: 3px; }
        .toc .toc-h5 { counter-reset: h6counter; padding-left: 80px; margin-bottom: 2px; }
        .toc .toc-h6 { padding-left: 100px; margin-bottom: 2px; }

        .toc .toc-h1 > a::before {
            counter-increment: h1counter;
            content: counter(h1counter) ". ";
            font-weight: bold;
        }
        .toc .toc-h2 > a::before {
            counter-increment: h2counter;
            content: counter(h1counter) "." counter(h2counter) " ";
            font-weight: normal;
            color: #555;
        }
        .toc .toc-h3 > a::before {
            counter-increment: h3counter;
            content: counter(h1counter) "." counter(h2counter) "." counter(h3counter) " ";
            color: #666;
        }

        .toc .toc-h4 > a::before {
            counter-increment: h4counter;
            content: counter(h1counter) "." counter(h2counter) "." counter(h3counter) "." counter(h4counter) " ";
            color: #777;
        }

        .toc .toc-h5 > a::before {
            counter-increment: h5counter;
            content: counter(h1counter) "." counter(h2counter) "." counter(h3counter) "." counter(h4counter) "." counter(h5counter) " ";
            color: #888;
        }

        .toc .toc-h6 > a::before {
            counter-increment: h6counter;
            content: counter(h1counter) "." counter(h2counter) "." counter(h3counter) "." counter(h4counter) "." counter(h5counter) "." counter(h6counter) " ";
            color: #999;
        }

        .toc .active {
            background-color: #eee;
            border-left: 4px solid #61afef;
            color: #000;
            font-weight: bold;
            padding-left: 6px;
        }

        table {
            width: 100%;
            border: 1px solid #ccc;
            border-collapse: collapse;
            margin: 1.5em 0; /* 与上下文拉开距离 */
        }
        th, td {
            border: 1px solid #ccc;
            padding: 0.75em 1em;
            text-align: left;
        }
        thead {
            background: #f3f3f3;
        }

        code, kbd, .highlight-inline {
            background-color: #f2f2f2;
            color: #c7254e;
            font-family: Menlo, Monaco, Consolas, "Courier New", monospace;
            font-size: 90%;
            padding: 0.2em 0.4em;
            border-radius: 3px;
        }

        .code-block {
            background-color: #282c34;
            color: #abb2bf;
            border-radius: 8px;
            padding: 0;
            margin-top: 20px;
            position: relative;
            overflow: auto;
        }
        .code-block-container {
            display: flex;
            flex-direction: column;
            position: relative;
            border-radius: 8px;
            overflow: hidden;
            margin-bottom: 1.5em; /* 代码块与下方内容拉开距离 */
        }
        .CodeMirror {
            height: auto;
        }
        .CodeMirror-scroll {
            overflow: auto;
        }
        .button-container {
            display: flex;
            justify-content: flex-end;
            padding: 10px 10px 0 0;
        }
        button.run-button,
        button.reset-button {
            background-color: #61afef;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 8px 16px;
            cursor: pointer;
            margin-left: 8px;
        }
        button.run-button:hover,
        button.reset-button:hover {
            background-color: #5292e2;
        }
        .output {
            background-color: #fff;
            color: #333;
            border: 1px solid #ccc;
            padding: 10px;
            border-radius: 4px;
            margin: 10px 0 0 0; /* 与按钮区拉开距离 */
            white-space: pre; /* 保持空白符号，启用水平滚动 */
            min-height: 25px;
            display: none; /* 初始隐藏输出框 */
            overflow-x: auto; /* 启用水平滚动 */
        }

        .sidebar, .main-article, .toc-container {
            background-color: #fafafa !important;
        }

        /* 响应式设计 */
        @media (max-width: 1024px) {
            .page-container {
                flex-direction: column;
            }
            .sidebar {
                width: 100%;
                height: auto;
                position: relative;
            }
            .content {
                flex-direction: column;
            }
            .main-article, .toc-container {
                width: 100% !important;
                max-width: 100% !important;
                min-width: 100% !important;
            }
            .toc-container {
                margin-top: 20px;
            }
        }
    </style>
</head>
<body>
<div class="page-container">
    <!-- 左侧目录：VuePress风格 sidebar -->
    <div class="sidebar">
        <h3>所有文章</h3>
        <ul>
            {% macro render_tree(tree, parent_path='') %}
                {# 当前目录下的文件 #}
                {% for file_info in tree.files %}
                    {% set file_full_path = (parent_path ~ '/' ~ file_info.filename).lstrip('/') %}
                    <li>
                        <a class="article-link {% if file_full_path == current_file %}active-file{% endif %}"
                           href="/article/{{ file_full_path }}">
                            {{ file_info.title }}
                        </a>
                    </li>
                {% endfor %}

                {# 子目录 #}
                {% for dirname, subdir_tree in tree.subdirs.items() %}
                    {% set subdir_path = (parent_path ~ '/' ~ dirname).lstrip('/') %}
                    <li>
                        <div class="folder-name" onclick="toggleFolder(this)">{{ dirname }}</div>
                        <ul class="nested {% if current_file.startswith(subdir_path) %}show{% endif %}">
                            {{ render_tree(subdir_tree, subdir_path) }}
                        </ul>
                    </li>
                {% endfor %}
            {% endmacro %}

            {{ render_tree(directory_tree, '') }}
        </ul>
    </div>

    <div class="content">
        <!-- 文章主体内容 -->
        <div class="main-article" id="article-content">

            <!-- === 元信息展示区域（样式改进） === -->
            <div class="meta-info">
                {% if meta.title %}
                  <h1>{{ meta.title[0] }}</h1>
                {% else %}
                  <h1>无标题</h1>
                {% endif %}

                {% if meta.author %}
                  <div class="meta-item">
                    <span class="meta-label"><i class="fas fa-user"></i> 作者:</span>
                    <span class="meta-value">{{ meta.author[0] }}</span>
                  </div>
                {% endif %}

                {% if meta.date %}
                  <div class="meta-item">
                    <span class="meta-label"><i class="fas fa-calendar-alt"></i> 日期:</span>
                    <span class="meta-value">{{ meta.date[0] }}</span>
                  </div>
                {% endif %}

                {% if meta.category %}
                  <div class="meta-item meta-categories">
                    <span class="meta-label"><i class="fas fa-folder"></i> 分类:</span>
                    <span class="meta-value">
                      {% for cat in meta.category %}
                        <span>{{ cat }}</span>
                      {% endfor %}
                    </span>
                  </div>
                {% endif %}

                {% if meta.tag %}
                  <div class="meta-item meta-tags">
                    <span class="meta-label"><i class="fas fa-tags"></i> 标签:</span>
                    <span class="meta-value">
                      {% for t in meta.tag %}
                        <span>{{ t }}</span>
                      {% endfor %}
                    </span>
                  </div>
                {% endif %}
            </div>
            <!-- === 元信息展示结束 === -->

            <!-- 原先就有的文章内容 -->
            <div id="content">
                {{ content|safe }}
            </div>
        </div>

        <!-- 大纲（TOC） -->
        <div class="toc-container">
            <h2>大纲</h2>
            <ul class="toc" id="article-toc">
                {{ toc|safe }}
            </ul>
        </div>
    </div>
</div>

<script>
    function toggleFolder(folderNameDiv) {
        const nestedUl = folderNameDiv.nextElementSibling;
        if (!nestedUl) return;
        nestedUl.classList.toggle('show');
    }

    document.addEventListener('click', function (e) {
        const target = e.target;
        if (target.classList.contains('article-link')) {
            e.preventDefault();
            const url = target.getAttribute('href');
            fetch(url)
                .then(response => {
                    return response.text();
                })
                .then(html => {
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    const newContent = doc.querySelector('#content');
                    const newToc = doc.querySelector('#article-toc');

                    if (newContent) {
                        document.getElementById('content').innerHTML = newContent.innerHTML;
                    }
                    if (newToc) {
                        document.getElementById('article-toc').innerHTML = newToc.innerHTML;
                    }
                    window.history.pushState({}, '', url);
                    reinitializeCodeBlocks();
                    if (window.MathJax) {
                        window.MathJax.typesetPromise();
                    }
                    updateActiveLink(url);
                })
                .catch(err => {
                    console.error('Error fetching article:', err);
                    window.location.href = url;
                });
        }
    });

    window.addEventListener('popstate', function (e) {
        location.reload();
    });

    function updateActiveLink(currentUrl) {
        const links = document.querySelectorAll('.article-link');
        links.forEach(link => link.classList.remove('active-file'));
        const currentLink = [...links].find(l => l.getAttribute('href') === currentUrl);
        if (currentLink) {
            currentLink.classList.add('active-file');
        }
    }

    function reinitializeCodeBlocks() {
        const codeBlocks = document.querySelectorAll('pre > code');
        codeBlocks.forEach(codeBlock => {
            const initialCode = codeBlock.textContent.trim();
            const language = codeBlock.className.replace('language-', '');
            const container = document.createElement('div');
            container.className = 'code-block';

            const editor = CodeMirror(container, {
                value: initialCode,
                mode: language,
                theme: "material-darker",
                lineNumbers: true,
                viewportMargin: Infinity,
                lineWrapping: false
            });

            const codeBlockContainer = document.createElement('div');
            codeBlockContainer.className = 'code-block-container';

            const buttonContainer = document.createElement('div');
            buttonContainer.className = 'button-container';

            const outputContainer = document.createElement('div');
            outputContainer.className = 'output';

            buttonContainer.appendChild(createResetButton(editor, initialCode, outputContainer));

            // 仅在语言为Python时添加运行按钮
            if (language === 'python') {
                buttonContainer.appendChild(createRunButton(editor, outputContainer));
            }

            codeBlockContainer.appendChild(container);
            codeBlockContainer.appendChild(buttonContainer);
            codeBlockContainer.appendChild(outputContainer);

            codeBlock.parentNode.insertBefore(codeBlockContainer, codeBlock);
            codeBlock.style.display = 'none';

            setTimeout(() => {
                editor.refresh();
                adjustEditorHeight(editor);
            }, 100);
        });

        const tocLinks = document.querySelectorAll('.toc a');
        const headings = document.querySelectorAll('.main-article h1, .main-article h2, .main-article h3, .main-article h4, .main-article h5, .main-article h6');
        let isScrolling = false;

        tocLinks.forEach(link => {
            link.addEventListener('click', e => {
                e.preventDefault();
                isScrolling = true;
                const id = link.getAttribute('href').substring(1);
                const heading = document.getElementById(id);
                if (heading) {
                    heading.scrollIntoView({behavior: 'smooth'});
                }
                setTimeout(() => {
                    isScrolling = false;
                }, 400);
            });
        });

        window.addEventListener('scroll', () => {
            if (isScrolling) return;
            let currentId = '';
            let offset = 100;

            headings.forEach((heading, index) => {
                const rect = heading.getBoundingClientRect();
                const nextRect = (headings[index + 1]) ? headings[index + 1].getBoundingClientRect() : {top: Infinity};
                if (rect.top <= offset && nextRect.top > offset) {
                    currentId = heading.id;
                }
            });

            tocLinks.forEach(link => {
                link.classList.remove('active');
                if (link.getAttribute('href') === '#' + currentId) {
                    link.classList.add('active');
                    ensureLinkVisible(link);
                }
            });
        });

        function ensureLinkVisible(link) {
            const tocContainer = document.querySelector('.toc-container');
            const linkRect = link.getBoundingClientRect();
            const tocRect = tocContainer.getBoundingClientRect();
            let currentScroll = tocContainer.scrollTop;

            isScrolling = true;
            if (linkRect.top < tocRect.top) {
                tocContainer.scrollTop = currentScroll - (tocRect.top - linkRect.top) - 20;
            } else if (linkRect.bottom > tocRect.bottom) {
                tocContainer.scrollTop = currentScroll + (linkRect.bottom - tocRect.bottom) + 20;
            }
            setTimeout(() => isScrolling = false, 100);
        }
    }

    async function loadPyodideAndPackages() {
        self.pyodide = await loadPyodide({
            indexURL: "https://cdn.jsdelivr.net/pyodide/v0.21.0/full/"
        });
        await self.pyodide.loadPackage(['micropip', 'numpy']);
    }
    loadPyodideAndPackages();

    function createRunButton(editor, outputElement) {
        const button = document.createElement('button');
        button.className = 'run-button';
        button.textContent = '运行代码';
        button.onclick = runCode;

        async function runCode() {
            outputElement.textContent = '';
            outputElement.style.display = 'block';
            try {
                self.pyodide.runPython(`
                    import sys, io
                    sys.stdout = io.StringIO()
                    sys.stderr = io.StringIO()
                `);
                await self.pyodide.runPythonAsync(editor.getValue());
                const stdout = self.pyodide.runPython('sys.stdout.getvalue()');
                const stderr = self.pyodide.runPython('sys.stderr.getvalue()');
                outputElement.textContent = (stdout + stderr).trim() || 'No output.';
            } catch (error) {
                outputElement.textContent = `Error:\n${error}`;
            }
        }

        editor.on('keydown', function (cm, event) {
            if ((event.ctrlKey || event.metaKey) && event.key === 'Enter') {
                runCode();
            }
        });
        editor.on('changes', function () {
            adjustEditorHeight(editor);
        });
        return button;
    }

    function createResetButton(editor, initialCode, outputElement) {
        const button = document.createElement('button');
        button.className = 'reset-button';
        button.textContent = '重置代码';
        button.onclick = function () {
            editor.setValue(initialCode);
            outputElement.textContent = '';
            outputElement.style.display = 'none';
            adjustEditorHeight(editor, true);
        };
        return button;
    }

    function adjustEditorHeight(editor, isReset = false) {
        const lineCount = editor.lineCount();
        const wrapperElement = editor.getWrapperElement();
        const previousHeight = wrapperElement.style.height;

        if (lineCount > 30) {
            wrapperElement.style.height = '480px';
        } else {
            wrapperElement.style.height = 'auto';
            wrapperElement.style.height = editor.getScrollerElement().scrollHeight + 'px';
        }

        if (!isReset && parseInt(wrapperElement.style.height) > parseInt(previousHeight)) {
            wrapperElement.scrollIntoView({behavior: 'smooth', block: 'start'});
        }
    }

    window.onload = function () {
        reinitializeCodeBlocks();
    };
</script>

<!-- MathJax -->
<script>
    window.MathJax = {
        tex: {
            inlineMath: [['$', '$'], ['\\(', '\\)']],
            displayMath: [['$$', '$$'], ['\\[', '\\]']]
        },
        options: {
            skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
        }
    };
</script>
<!-- 保留注释以方便恢复 -->
<!-- <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml-full.js" async></script> -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.2/es5/tex-chtml-full-speech.min.js" async></script>
</body>
</html>

index.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>My Blog</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/style.css">
    <link rel="icon" href="https://bornforthis.cn/favicon.ico">
</head>
<body>
<div class="container-fluid">
    <div class="row">
        <!-- 左侧栏目，也可以考虑固定位置，但这里保留原样做最小修改 -->
        <div class="col-md-3">
            <div class="sidebar">
                <h3>Categories</h3>
                <ul>
                    {# 递归渲染目录结构 #}
                    {% macro render_tree(tree, parent_path='') %}
                        {# 当前目录下的文件 #}
                        {% for file_info in tree.files %}
                            <li>
                                <a href="/article/{{ (parent_path ~ '/' ~ file_info.filename).lstrip('/') }}">
                                    {{ file_info.title }}
                                </a>
                            </li>
                        {% endfor %}

                        {# 子目录 #}
                        {% for dirname, subdir_tree in tree.subdirs.items() %}
                            <li>
                                <strong>{{ dirname }}</strong>
                                <ul>
                                    {{ render_tree(subdir_tree, parent_path ~ '/' ~ dirname) }}
                                </ul>
                            </li>
                        {% endfor %}
                    {% endmacro %}

                    {{ render_tree(directory_tree, '') }}
                </ul>
            </div>
        </div>
        <div class="col-md-9">
            <div id="content">
                <h1>Welcome to My Blog</h1>
                <p>这里是一个简单的首页示例，你可以在此列出所有文章分类，或做其它导航。</p>
            </div>
        </div>
    </div>
</div>
</body>
</html>

style.css:
body, textarea {
    font-family: 'Consolas', 'Monaco', monospace;
    background-color: #282A36; /* Dark background similar to Sublime Text */
    color: #F8F8F2; /* Light text color */
}

textarea {
    background-color: #282A36;
    color: #F8F8F2;
    border: none;
}

.output {
    background-color: #44475A;
    color: #F8F8F2;
}

.sidebar ul {
    list-style-type: none;
    padding: 0;
}

.sidebar a {
    color: #8BE9FD; /* A light blue color */
    text-decoration: none;
}

